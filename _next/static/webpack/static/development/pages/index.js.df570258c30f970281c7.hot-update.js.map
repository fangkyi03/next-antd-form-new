{"version":3,"file":"static/webpack/static/development/pages/index.js.df570258c30f970281c7.hot-update.js","sources":["webpack:///./components/FormContainer/index.js"],"sourcesContent":["import React from 'react'\nimport { Row, Col } from 'antd';\nimport apiTool from '../../command/apiTool';\nimport 'antd/es/form/style'\nimport FormSelect from './FormSelect';\nimport FormInput from './FormInput';\nimport classNames from 'classnames';\nimport Animate from 'rc-animate';\nimport moment from 'moment'\nimport FormRef from './FormRef';\nimport formStore from '../../utils/formStore';\n\nexport default class FormContainer {\n\n    static defaultProps = {\n        colSize: {\n            labelCol: 8,\n            wrappCol: 16,\n        }\n    }\n\n    constructor({ formData, ...arg }) {\n        this.formData = formData\n        this.props = arg\n        this.customChildren = null\n        this.destoryNum = 0\n        this.errorObj = {}\n        this.errorTime = moment().valueOf()\n        this._ref = {}\n        this.initStore()\n    }\n\n    initStore = () =>{\n        formStore.addStore(this.props.modelList[0],{\n            subscribe:this.subscribe,\n            data:{}\n        })\n    }\n\n    subscribe = (dataSource) =>{\n        Object.keys(dataSource).forEach((e)=>{\n            this._ref[e].setData()\n        })\n    }\n\n    getChildrenData = (item) => {\n        return item.keys\n    }\n\n    renderCols = ({ item, index }) => {\n        return (Component) => {\n            return (\n                <Col span={item.cols || 8}>\n                    {this.renderNormal({ item, index })(Component)}\n                </Col>\n            )\n        }\n    }\n\n    getValue = (item) => {\n        const { dataSource = {} } = this.props\n        if (!item.key) return\n        return dataSource[item.key] ? dataSource[item.key] : item.value || ''\n    }\n\n    renderNormal = ({ item, index }) => {\n        return (Component) => {\n            if (item.name) return this.renderFormItem({ item, index })(Component)\n            return this.renderComponent({ item, index })(Component)\n        }\n    }\n\n    onChange = (value, item) => {\n        switch (item.type) {\n            case 'input':\n                apiTool.setFormValue(this, this.props.modelList[0], { [item.key]: value.currentTarget.value })\n                break;\n            default:\n                apiTool.setFormValue(this, this.props.modelList[0], { [item.key]: value })\n                break;\n        }\n    }\n\n    onHelpAnimEnd = () => {\n        console.log('动画结束')\n    }\n\n    getTypeData = (item) => {\n        const { typeData = {} } = this.props\n        return typeData[item.key] || item.typeData || []\n    }\n\n    onDestory = () => {\n        if (this.destoryNum == 0) {\n            this.destoryNum += 1;\n            setTimeout(() => {\n                console.log('输出延迟')\n            }, 100)\n        } else {\n            this.destoryNum += 1;\n        }\n    }\n\n    getNotDisplay = (item) => {\n        const { notDisplay = [] } = this.props\n        return notDisplay.indexOf(item.key) == -1\n    }\n\n    getRule = (rule, value, item) => {\n        const data = {\n            required: {\n                reg: /\\S/,\n                msg: '请输入' + (item.name || '') + '内容'\n            },\n            maxLen: {\n                err: value.length > (rule.value || 10),\n                msg: '输入内容超过长度'\n            }\n        }\n        if (!rule.type) {\n            if (!data['required'].reg.test(value)) {\n                return rule.msg || data['required'].msg\n            } else {\n                return ''\n            }\n        } else if (data[rule.type].reg && !data[rule.type].reg.test(value)) {\n            return rule.msg || data[rule.type].msg\n        } else if (data[rule.type].err) {\n            return rule.msg || data[rule.type].msg\n        } else {\n            return ''\n        }\n    }\n\n    getRules = (item) => {\n        for (let i = 0; i < item.rules.length; i++) {\n            const retData = this.getRule(item.rules[i], this.getValue(item), item)\n            if (retData) {\n                return retData\n            }\n        }\n        return null\n    }\n\n    addError = (item) => {\n        const { error = {} } = this.props\n        if (error[item.key] !== this.errorObj[item.key]) {\n            apiTool.setFormError(this, this.props.modelList[0], this.errorObj);\n        }\n    }\n\n    isEqual = () => {\n        return JSON.stringify(this.props.error) == JSON.stringify(this.errorObj)\n    }\n\n    getRef = () =>{\n        return this._ref\n    }\n\n    pushError = (item) => {\n        const ret = this.getRules(item)\n        this.errorObj[item.key] = ret\n        this.addError(item)\n    }\n\n    getRulesMessage = (item) => {\n        if (item.rules && item.rules.length > 0) {\n            this.pushError(item)\n            const { error = {} } = this.props\n            if (error[item.key]) {\n                return error[item.key]\n            } else {\n                return ''\n            }\n        } else {\n            return ''\n        }\n    }\n\n    getDisable = (item) => {\n        const { disable = [] } = this.props\n        return disable.indexOf(item.key) !== -1\n    }\n\n    renderComponent = ({ item, index }) => {\n        return (Component) => {\n            const errorMsg = this.getRulesMessage(item)\n            const classes = classNames(\n                'ant-form-item-children', {\n                    'has-error': errorMsg,\n                }\n            )\n            return (\n                <div className={classes} key=\"help\">\n                    <span className={'ant-form-item-children'}>\n                        <FormRef\n                            ref={(r) => this._ref[item.key] = r}\n                        >\n                            <Component\n                                key={index}\n                                style={item.style}\n                            // value={this.getValue(item)}\n                            // typeData={this.getTypeData(item)}\n                            // onChange={(value) => this.onChange(value, item)}\n                            // disable={this.getDisable(item)}\n                            />\n                        </FormRef>\n                    </span>\n                    {\n                        errorMsg &&\n                        <Animate\n                            transitionName=\"show-help\"\n                            component=\"\"\n                            transitionAppear\n                            key=\"help\"\n                        >\n                            <div className={`ant-form-explain`} key=\"help\">\n                                {errorMsg}\n                            </div>\n                        </Animate>\n                    }\n                </div>\n            )\n        }\n    }\n\n    renderFormItem = ({ item, index }) => {\n        return (Component) => {\n            return (\n                <Row key={index} className={'ant-form-item'}>\n                    {this.renderLabel(item)}\n                    {this.renderWraper(item)(Component)}\n                </Row>\n            )\n        }\n    }\n\n    getLabelCol = (item) => {\n        const { colSize } = this.props\n        return item.labelCol || colSize.labelCol || 8\n    }\n\n    getWrapperCol = (item) => {\n        const { colSize } = this.props\n        return item.wrappCol || colSize.wrappCol || 8\n    }\n\n    getRequired = (item) => {\n        if (item.rules) {\n            return item.rules.some((e) => e.required == true)\n        } else {\n            return false\n        }\n    }\n\n    renderLabel = (item) => {\n        const labelCol = this.getLabelCol(item)\n        const labelClass = classNames({\n            ['ant-form-item-required']: this.getRequired(item)\n        })\n        return (\n            <Col span={labelCol} className={'ant-form-item-label'}>\n                <label className={labelClass} title={item.name}>{item.name}</label>\n            </Col>\n        )\n    }\n\n    renderWraper = (item) => {\n        const wrappCol = this.getWrapperCol(item)\n        return (Component) => {\n            return (\n                <Col span={wrappCol}>\n                    {this.renderComponent({ item })(Component)}\n                </Col>\n            )\n        }\n    }\n\n    renderChildren = ({ item, index }) => {\n        return (Component) => {\n            const isNotDisplay = this.getNotDisplay(item)\n            if (!isNotDisplay) return null\n            const fun = [this.renderNormal, this.renderCols][Number(!!item.cols)]\n            return fun({ item, index })(Component)\n        }\n    }\n\n    renderGroup = (item) => {\n        const groupCol = item.cols || 24\n        return (Component) => {\n            return (\n                <Col span={groupCol}>\n                    <Row gutter={item.gutter || 8} className={'ant-row'}>\n                        {Component}\n                    </Row>\n                </Col>\n            )\n        }\n    }\n\n    renderItemGroup = (item) => {\n        const wrappCol = this.getWrapperCol(item)\n        return (Component) => {\n            return (\n                <Col span={item.cols || 8}>\n                    <Row gutter={item.gutter || 5} className={'ant-row ant-form-item'}>\n                        {this.renderLabel(item)}\n                        <Col span={wrappCol}>\n                            {Component}\n                        </Col>\n                    </Row>\n                </Col>\n            )\n        }\n    }\n\n    setCustomChildren(callBack) {\n        this.customChildren = callBack;\n    }\n\n    getCustomChildren = ({ item }) => {\n        if (this.customChildren) {\n            const retData = this.customChildren(item)\n            if (React.isValidElement(retData)) {\n                return retData\n            } else if (Array.isArray(retData)) {\n                return this.getChildrenMap(retData)\n            } else if (retData.type) {\n                return this.getChildren({ item: retData })\n            } else {\n                return\n            }\n        } else {\n            return null\n        }\n    }\n\n    getChildren = (data) => {\n        switch (data.item.type) {\n            case 'input':\n                return this.renderChildren(data)(FormInput)\n            case 'select':\n                return this.renderChildren(data)(FormSelect)\n            case 'checkBox':\n                return this.renderChildren(data)(Checkbox)\n            case 'group':\n                return this.renderGroup(data.item)(this.getChildrenMap(data.item.keys));\n            case 'itemGroup':\n                return this.renderItemGroup(data.item)(this.getChildrenMap(data.item.keys.map((e) => ({ ...e, name: null }))))\n            default:\n                return this.getCustomChildren(data)\n        }\n    }\n\n    getChildrenMap = (data = this.formData) => {\n        return data.map((e, index) => {\n            return this.getChildren({ item: e, index })\n        })\n    }\n\n    getRow = (children, gutter = 10) => {\n        return (\n            <Row gutter={gutter}>\n                {children}\n            </Row>\n        )\n    }\n\n    bindData = (data) => {\n        this.props = data\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AASA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AAYA;AACA;AACA;AAFA;AAIA;AACA;AAjBA;AAmBA;AACA;AACA;AACA;AACA;AAvBA;AAyBA;AACA;AACA;AA3BA;AA4BA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AArCA;AAsCA;AAAA;AAEA;AACA;AACA;AACA;AA3CA;AA4CA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAlDA;AAoDA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AANA;AAQA;AACA;AA7DA;AA+DA;AACA;AACA;AAjEA;AAkEA;AAAA;AAEA;AACA;AACA;AAtEA;AAwEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjFA;AAkFA;AAAA;AAEA;AACA;AACA;AAtFA;AAwFA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhHA;AAkHA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA1HA;AA2HA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAjIA;AAmIA;AACA;AACA;AArIA;AAuIA;AACA;AACA;AAzIA;AA2IA;AACA;AAAA;AACA;AAAA;AACA;AACA;AA/IA;AAiJA;AACA;AACA;AAFA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7JA;AA8JA;AAAA;AAEA;AACA;AACA;AAlKA;AAmKA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AADA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAPA;AAaA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAOA;AACA;AACA;AA5MA;AA6MA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAKA;AACA;AACA;AAvNA;AAwNA;AAEA;AACA;AACA;AA5NA;AA6NA;AAEA;AACA;AACA;AAjOA;AAmOA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAzOA;AA2OA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AArPA;AAuPA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAhQA;AAiQA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAzQA;AA2QA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAKA;AACA;AACA;AAtRA;AAwRA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAMA;AACA;AACA;AAtSA;AA2SA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3TA;AA6TA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAZA;AAcA;AACA;AA5UA;AA6UA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAlVA;AAmVA;AACA;AACA;AAAA;AAIA;AACA;AA1VA;AA4VA;AACA;AACA;AA7VA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA6RA;AACA;AACA;;;;;;AAlTA;AAGA;AACA;AACA;AAFA;AADA;AACA;;;;;A","sourceRoot":""}